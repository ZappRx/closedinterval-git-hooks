#!/bin/bash
#
# A hook to disallow php syntax errors or js lint errors to be committed
#
# This is a pre-commit hook.
#
# To install this you can either copy or symlink it to
# $GIT_DIR/hooks

# necessary check for initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1; then
	AGAINST_REV=HEAD
else
	# Initial commit: diff against an empty tree object
	AGAINST_REV=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

if ! type php >/dev/null 2>&1; then
	echo "PHP Syntax check failed:"
	echo "PHP binary does not exist or is not in path: php"
	echo "You can bypass this hook with the --no-verify option"
	exit 1
fi

if ! type node >/dev/null 2>&1; then
	echo "JS Syntax check failed:"
	echo "NodeJs binary does not exist or is not in path: node"
	echo "You can bypass this hook with the --no-verify option"
	exit 1
fi

# dash does not support $'\n':
# http://forum.soft32.com/linux2/Bug-409179-DASH-Settings-IFS-work-properly-ftopict70039.html
IFS='
'

# output formatting
PHP_ERROR_FORMAT='PHP {{type}} error: [{{file}}:{{line}}] {{message}}.'
PHPCS_ERROR_FORMAT='PHP CS {{type}}:    [{{file}}:{{line}}] {{message}}.'

# phpcs path
PHPCS_PATH='.build/phpcs.phar'
PHPCS_STANDARD="PSR2"

# error output
PHP_ERRORS=''
PHPCS_ERRORS=''
JS_ERRORS=''
CSS_ERRORS=''
HAS_ERROR=0

# colors
PHP_COLOR=57
PHPCS_COLOR=197
JS_COLOR=36
CSS_COLOR=33

# variables
INDICATOR_LENGTH=65
COUNTER=0
FILES=$(git diff-index --cached --full-index "$AGAINST_REV")
FILE_COUNT=$(echo "$FILES" | wc -l)

# get a list of staged files
for line in $FILES; do
	# split needed values
	sha=$(echo $line | cut -d' ' -f4)
	temp=$(echo $line | cut -d' ' -f5)
	status=$(echo $temp | cut -d'	' -f1)
	filename=$(echo $temp | cut -d'	' -f2)
	ext=$(echo $filename | sed 's/^.*\.//')
	clean_filename="$(echo $filename | sed 's/\//\\\//g')"
	indicator='.'

	# do not check deleted files
	if [[ $status = "D" ]]; then
		continue
	fi

	# check files with php extension against the php linter
	if [[ "$ext" == "php" ]]; then
		modified_file="$(git cat-file -p $sha)"
		# check the staged file content for syntax errors using php -l (lint)
		result=$(echo "$modified_file" | php -l 2>&1)
		if [[ $? -ne 0 ]] || [[ "$(uname)" = MINGW* && -n $(echo "$result" | grep -v "No syntax errors detected") ]]; then
			HAS_ERROR=1
			indicator='E'
			# Format the output string
			replacement="${PHP_ERROR_FORMAT/\{\{type\}\}/\\1}"
			replacement="${replacement/\{\{message\}\}/\\2}"
			replacement="${replacement/\{\{line\}\}/\\3}"
			replacement="${replacement/\{\{file\}\}/$clean_filename}"
			php_format='s/^\([A-Za-z0-9]\+\) error: \(.\+\) in - on line \([0-9]\+\)$/'$replacement'/g'
			PHP_ERRORS="$(echo "$PHP_ERRORS"; echo "$result" | grep "error: " | sed "$php_format")"
		fi

		if [[ -n "$PHPCS_PATH" ]] && [[ $filename != classes/vendor/* ]]; then
			phpcs_result="$(echo "$modified_file" | php "$PHPCS_PATH" --standard=$PHPCS_STANDARD --warning-severity=0 --report=emacs 2>&1)"
			if [[ $? -ne 0 ]]; then
				HAS_ERROR=1
				indicator='E'
				# Format the output string
				replacement="${PHPCS_ERROR_FORMAT/\{\{type\}\}/error}"
				replacement="${replacement/\{\{message\}\}/\\2}"
				replacement="${replacement/\{\{line\}\}/\\1}"
				replacement="${replacement/\{\{file\}\}/$clean_filename}"
				phpcs_format='s/^STDIN:\([0-9]\+\):[0-9]\+: error - \(.\+\)$/'$replacement'/g'
				PHPCS_ERRORS="$(echo "$PHPCS_ERRORS"; echo "$phpcs_result" | sed "$phpcs_format")"
			fi
		fi
	fi

	# check files with js or html extension against the js linter
	if [[ "$ext" == "js" || "$ext" == "html" ]]; then
		# check the staged file content for syntax errors using jshint
		result=$(git cat-file -p $sha | node .build/jshint/lint-hook.js "$filename" 2>&1)
		if [[ $? -ne 0 ]]; then
			HAS_ERROR=1
			indicator='E'
			# Swap back in correct filenames
			JS_ERRORS=$(echo "$JS_ERRORS"; echo "$result" | grep "error: ")
		fi
	fi

	# check files with css or html extension against the css linter
	if [[ "$ext" == "css" || "$ext" == "html" ]]; then
		# check the staged file content for syntax errors using csslint
		result=$(git cat-file -p $sha | node .build/csslint/lint-hook.js "$filename" 2>&1)
		if [[ $? -ne 0 ]]; then
			HAS_ERROR=1
			indicator='E'
			# Swap back in correct filenames
			CSS_ERRORS=$(echo "$CSS_ERRORS"; echo "$result" | grep "error: ")
		fi
	fi

	# increment counters
	COUNTER=$((COUNTER+1))
	echo -n $indicator
	if [[ $(($COUNTER % $INDICATOR_LENGTH)) == 0 ]] || [[ $COUNTER == $FILE_COUNT ]]; then
		if [[ $COUNTER == $FILE_COUNT ]]; then
			echo -n $(printf '%'$(($INDICATOR_LENGTH - $(($COUNTER % $INDICATOR_LENGTH))))'s' '')
		fi
		echo " $(printf %3s $COUNTER) / $(printf %3s $FILE_COUNT)"
	fi
done
unset IFS

if [[ $HAS_ERROR -eq 1 ]]; then
	# colorize php output
	echo -en "\e[38;5;${PHP_COLOR}m";
	echo -n "$PHP_ERRORS"
	echo -en "\e[0m";

	# colorize phpcs output
	echo -en "\e[38;5;${PHPCS_COLOR}m";
	echo -n "$PHPCS_ERRORS"
	echo -en "\e[0m";

	# colorize js output
	echo -en "\e[38;5;${JS_COLOR}m";
	echo -n "$JS_ERRORS"
	echo -en "\e[0m";

	# colorize css output
	echo -en "\e[38;5;${CSS_COLOR}m";
	echo -n "$CSS_ERRORS"
	echo -en "\e[0m";

	echo "";
	exit 1
fi
