#!/bin/bash
#
# A hook to disallow php syntax errors or js lint errors to be committed
#
# This is a pre-commit hook.
#
# To install this you can either copy or symlink it to
# $GIT_DIR/hooks

# necessary check for initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1; then
	AGAINST_REV=HEAD
else
	# Initial commit: diff against an empty tree object
	AGAINST_REV=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

NODE_BIN="$(which node 2>/dev/null)"
if type cygpath >/dev/null 2>&1; then
	NODE_BIN="$(cygpath -u "c:/Program Files/nodejs/node.exe")"
fi

if ! type "$NODE_BIN" >/dev/null 2>&1; then
	echo "JS Syntax check failed:"
	echo "NodeJs binary does not exist or is not in path: node"
	echo "You can bypass this hook with the --no-verify option"
	exit 1
fi

# dash does not support $'\n':
# http://forum.soft32.com/linux2/Bug-409179-DASH-Settings-IFS-work-properly-ftopict70039.html
IFS='
'

# error output
ERRORS=''
HAS_ERROR=0

# variables
INDICATOR_LENGTH=65
COUNTER=0
FILES=$(git diff-index --cached --full-index "$AGAINST_REV")
FILE_COUNT=$(echo "$FILES" | cut -d ' ' -f 5 | grep -v ^D | wc -l)
ERROR_INDICATOR="$(echo -e "\e[1m\e[1;31mE\e[0m")"
TMP_FILE=.git/pre-commit-tmpfile

# get a list of staged files
for line in $FILES; do
	# split needed values
	sha=$(echo $line | cut -d' ' -f4)
	temp=$(echo $line | cut -d' ' -f5)
	status=$(echo $temp | cut -d'	' -f1)
	filename=$(echo $temp | cut -d'	' -f2)
	ext=$(echo $filename | sed 's/^.*\.//')
	clean_filename="$(echo $filename | sed 's/\//\\\//g')"
	indicator='.'

	# do not check deleted files
	if [[ $status = "D" ]]; then
		continue
	fi

	# check the staged file content for syntax errors using jshint
	git cat-file -p $sha > $TMP_FILE
	result=$("$NODE_BIN" .build/pre-commit-check.js "$filename" "$TMP_FILE" 2>&1)
	if [[ $? -ne 0 ]]; then
		HAS_ERROR=1
		indicator=$ERROR_INDICATOR
		#echo "$result"
		# Swap back in correct filenames
		ERRORS=$(echo "$ERRORS"; echo "$result")
	fi

	# increment counters
	COUNTER=$((COUNTER+1))
	echo -n $indicator
	if [[ $(($COUNTER % $INDICATOR_LENGTH)) == 0 ]] || [[ $COUNTER == $FILE_COUNT ]]; then
		if [[ $COUNTER == $FILE_COUNT ]]; then
			echo -n $(printf '%'$(($INDICATOR_LENGTH - $(($COUNTER % $INDICATOR_LENGTH))))'s' '')
		fi
		echo " $(printf %3s $COUNTER) / $(printf %3s $FILE_COUNT)"
	fi
done
unset IFS

rm -f "$TMP_FILE"

if [[ $counter -gt 0 ]] && [[ $HAS_ERROR -eq 0 ]]; then
	echo ""
fi

if [[ $HAS_ERROR -eq 1 ]]; then
	# colorize php output
	echo -n "$ERRORS"
	echo ""
	exit 1
fi

exit 1
