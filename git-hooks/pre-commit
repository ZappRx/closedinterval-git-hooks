#!/bin/bash
#
# A hook to disallow php syntax errors or js lint errors to be committed
#
# This is a pre-commit hook.
#
# To install this you can either copy or symlink it to
# $GIT_DIR/hooks

# necessary check for initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1; then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

PHP_COLOR=57
PHPCS_COLOR=197
JS_COLOR=36
CSS_COLOR=33

if ! type php >/dev/null 2>&1; then
	echo "PHP Syntax check failed:"
	echo "PHP binary does not exist or is not in path: php"
	echo "You can bypass this hook with the --no-verify option"
	exit 1
fi

if ! type node >/dev/null 2>&1; then
	echo "JS Syntax check failed:"
	echo "NodeJs binary does not exist or is not in path: node"
	echo "You can bypass this hook with the --no-verify option"
	exit 1
fi

# dash does not support $'\n':
# http://forum.soft32.com/linux2/Bug-409179-DASH-Settings-IFS-work-properly-ftopict70039.html
IFS='
'

# error output
PHP_ERRORS=''
PHPCS_ERRORS=''
JS_ERRORS=''
CSS_ERRORS=''
error=0

# phpcs path
PHPCS_PATH=$(git config --get code.phpcs)
PHPCS_STANDARD="Snap"

# get a list of staged files
for line in $(git diff-index --cached --full-index $against); do
	# split needed values
	sha=$(echo $line | cut -d' ' -f4)
	temp=$(echo $line | cut -d' ' -f5)
	status=$(echo $temp | cut -d'	' -f1)
	filename=$(echo $temp | cut -d'	' -f2)
	ext=$(echo $filename | sed 's/^.*\.//')
	clean_filename="$(echo $filename | sed 's/\//\\\//g')"

	# do not check deleted files
	if [[ $status = "D" ]]; then
		continue
	fi

	# check files with php extension against the php linter
	if [[ "$ext" == "php" ]]; then
		modified_file="$(git cat-file -p $sha)"
		# check the staged file content for syntax errors using php -l (lint)
		result=$(echo "$modified_file" | php -l 2>&1)
		if [[ $? -ne 0 ]] || [[ "$(uname)" = MINGW* && -n $(echo "$result" | grep -v "No syntax errors detected") ]]; then
			error=1
			# Swap back in correct filenames
			PHP_ERRORS="$(echo "$PHP_ERRORS"; echo "PHP $(echo "$result" | grep "error: " | sed -e "s/in - on/in $clean_filename on/g")")"
		fi
		if [[ -n "$PHPCS_PATH" ]]; then
			phpcs_result="$(echo "$modified_file" | php "$PHPCS_PATH" --standard=$PHPCS_STANDARD --warning-severity=0 --report=emacs 2>&1)"
			if [[ $? -ne 0 ]]; then
				error=1
				PHPCS_ERRORS="$(echo "$PHPCS_ERRORS"; echo "$phpcs_result" | sed 's/^STDIN:\([0-9]\+\):[0-9]\+: error - \(.\+\)$/PHPCS error: \2. in '$clean_filename' on line \1/g')"
			fi
		fi
	fi

	# check files with js or html extension against the js linter
	if [[ "$ext" == "js" || "$ext" == "html" ]]; then
		# check the staged file content for syntax errors using jshint
		result=$(git cat-file -p $sha | node .build/jshint/lint-hook.js "$filename" 2>&1)
		if [[ $? -ne 0 ]]; then
			error=1
			# Swap back in correct filenames
			JS_ERRORS=$(echo "$JS_ERRORS"; echo "$result" | grep "error: ")
		fi
	fi

	# check files with css or html extension against the css linter
	if [[ "$ext" == "css" || "$ext" == "html" ]]; then
		# check the staged file content for syntax errors using csslint
		result=$(git cat-file -p $sha | node .build/csslint/lint-hook.js "$filename" 2>&1)
		if [[ $? -ne 0 ]]; then
			error=1
			# Swap back in correct filenames
			CSS_ERRORS=$(echo "$CSS_ERRORS"; echo "$result" | grep "error: ")
		fi
	fi
done
unset IFS

if [[ $error -eq 1 ]]; then
	# colorize php output
	echo -en "\e[38;5;${PHP_COLOR}m";
	echo -n "$PHP_ERRORS"
	echo -en "\e[0m";

	# colorize phpcs output
	echo -en "\e[38;5;${PHPCS_COLOR}m";
	echo -n "$PHPCS_ERRORS"
	echo -en "\e[0m";

	# colorize js output
	echo -en "\e[38;5;${JS_COLOR}m";
	echo -n "$JS_ERRORS"
	echo -en "\e[0m";

	# colorize css output
	echo -en "\e[38;5;${CSS_COLOR}m";
	echo -n "$CSS_ERRORS"
	echo -en "\e[0m";

	echo "";
	exit 1
fi
